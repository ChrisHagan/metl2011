<Application x:Class="SandRibbon.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:SandRibbon.Components"
    xmlns:core="clr-namespace:System;assembly=mscorlib"
    xmlns:SandRibbonInterop="clr-namespace:SandRibbonInterop;assembly=SandRibbonInterop"
    xmlns:sr="http://schemas.divelements.co.uk/wpf/sandribbon"
    Startup="Application_Startup"
    StartupUri="Window1.xaml">

    <Application.Resources>
        <!--This area is for defining colours and gradients for use on other controls-->
        <core:Int32 x:Key="ToolTipDelay">400</core:Int32>
        <LinearGradientBrush x:Key="BackgroundGrayGradient" Opacity="1" StartPoint="0,0" EndPoint="1,.2">
            <GradientStop Color="#FFBABABA" Offset="0"/>
            <GradientStop Color="#FF848484" Offset="0.7"/>
            <GradientStop Color="#FF959595" Offset="1"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="BackgroundBlueGradient" Opacity="1" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFF5FAFF" Offset="0"/>
            <GradientStop Color="#FFD0DEEF" Offset="0.39"/>
            <GradientStop Color="#FFCADAED" Offset="0.40"/>
            <GradientStop Color="#FFE7F2FF" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="MonashBlueGradient" Opacity="1" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFF5FAFF" Offset="0"/>
            <GradientStop Color="#FFC5D5F6" Offset="0.2"/>
            <GradientStop Color="#FF87ACF2" Offset="0.35"/>
            <GradientStop Color="#FF7AA3F4" Offset="0.40"/>
            <GradientStop Color="#FFC5D5F6" Offset="1"/>
        </LinearGradientBrush>
        <SandRibbonInterop:AutoShape x:Key="BlueAutoShape" Background="LightBlue" Foreground="DarkBlue">
            <SandRibbonInterop:AutoShape.PathData>
                <PathGeometry>
                    <PathGeometry.Figures>
                        <PathFigureCollection>
                            <PathFigure IsClosed="True" StartPoint="10,100">
                                <PathFigure.Segments>
                                    <PathSegmentCollection>
                                        <LineSegment Point="100,100" />
                                        <LineSegment Point="100,50" />
                                    </PathSegmentCollection>
                                </PathFigure.Segments>
                            </PathFigure>
                        </PathFigureCollection>
                    </PathGeometry.Figures>
                </PathGeometry>
            </SandRibbonInterop:AutoShape.PathData>
        </SandRibbonInterop:AutoShape>

        <SolidColorBrush x:Key="MiniMapSelectionBox" Color="#88FFFF00"/>

        <SolidColorBrush Color="LightGray" x:Key="MouseOverBorderBrush"/>
        <SolidColorBrush Color="Black" x:Key="MouseOverContentBrush"/>
        <LinearGradientBrush x:Key="MouseOverGradient" Opacity="1" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFFFFDED" Offset="0"/>
            <GradientStop Color="#FFFFEBAC" Offset="0.39"/>
            <GradientStop Color="#FFFFD45F" Offset="0.40"/>
            <GradientStop Color="#FFFFD45F" Offset="1"/>
        </LinearGradientBrush>

        <SolidColorBrush Color="DarkGray" x:Key="CheckedBorderBrush"/>
        <SolidColorBrush Color="Black" x:Key="CheckedContentBrush"/>
        <LinearGradientBrush x:Key="CheckedGradient" Opacity="1" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFFED7A9" Offset="0"/>
            <GradientStop Color="#FFFBB565" Offset="0.39"/>
            <GradientStop Color="#FFFA9831" Offset="0.40"/>
            <GradientStop Color="#FFFDECA6" Offset="1"/>
        </LinearGradientBrush>

        <SolidColorBrush Color="DarkGray" x:Key="PressedBorderBrush"/>
        <SolidColorBrush Color="Black" x:Key="PressedContentBrush"/>
        <LinearGradientBrush x:Key="PressedGradient" Opacity="1" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFFED7A9" Offset="0"/>
            <GradientStop Color="#FFFBB565" Offset="0.45"/>
            <GradientStop Color="#FFFA9831" Offset="0.46"/>
            <GradientStop Color="#FFFDECA6" Offset="1"/>
        </LinearGradientBrush>

        <!--This area is for defining control templates and their triggers on specific controls-->
        <Style TargetType="{x:Type SandRibbonInterop:Video}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:Video}">
                        <Border CornerRadius="4" Padding="4" 
                                BorderBrush="DarkGray" BorderThickness="1"
                                Background="{StaticResource BackgroundBlueGradient}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="20"/>
                                </Grid.RowDefinitions >
                                <MediaElement Grid.Row="0" Source="{TemplateBinding VideoSource}"/>
                                <StackPanel Grid.Row="1" Orientation="Horizontal">
                                    <Button Content="SkipBack"/>
                                    <Button Content="Play"/>
                                    <Button Content="Pause"/>
                                    <Button Content="SkipForward"/>
                                    <Button Content="Restart"/>
                                    <Button Content="Mute"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:RenderedLiveWindow}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:RenderedLiveWindow}">
                        <Border CornerRadius="4" Padding="4" 
                                BorderBrush="DarkGray" BorderThickness="1"
                                Background="{StaticResource BackgroundBlueGradient}">
                            <Rectangle Height="{TemplateBinding Height}" 
                                Width="{TemplateBinding Width}" 
                                Fill="{TemplateBinding RectFill}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:AutoShape}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:AutoShape}">
                        <Grid>
                            <Path Stretch="Fill" StrokeThickness="{TemplateBinding StrokeThickness}" Data="{TemplateBinding PathData}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Foreground}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type Button}" TargetType="Button">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <Setter Property="FontSize" Value="12px"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" 
				BorderThickness="1"
				Padding="2" 
				BorderBrush="Transparent" 
				CornerRadius="2" 
				Background="Transparent">
                            <Grid>
                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="True">
                                <Setter TargetName="border" Property="BorderThickness" Value="3" />
                            </Trigger>
                            <!--<Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>-->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.2" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarButtonStyle" TargetType="Button">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <Setter Property="FontSize" Value="12px"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" 
				BorderThickness="1"
				Padding="0" 
				BorderBrush="Transparent" 
				CornerRadius="0" 
				Background="Transparent">
                            <Grid>
                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="True">
                                <Setter TargetName="border" Property="BorderThickness" Value="3" />
                            </Trigger>
                            <!--<Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>-->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.2" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="GridSplitterPreviewStyle">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Fill="{StaticResource CheckedGradient}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type GridSplitter}" TargetType="GridSplitter">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GridSplitter">
                        <Border Name="border" 
				BorderThickness="1"
				Padding="0" 
				BorderBrush="LightGray" 
				CornerRadius="0" 
				Background="{StaticResource BackgroundBlueGradient}">
                            <Rectangle Margin="0" Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border Name="Border" CornerRadius="2" Padding="2" SnapsToDevicePixels="true">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource CheckedGradient}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type RadioButton}" TargetType="RadioButton">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontFamily" Value="Verdana"/>
            <Setter Property="FontSize" Value="12px"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border Name="border" 
				BorderThickness="1"
				Padding="4,2" 
				BorderBrush="Transparent" 
				CornerRadius="2" 
				Background="Transparent">
                            <Grid>
                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource MouseOverGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource PressedGradient}"/>
                                <Setter Property="Foreground" Value="Gray"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="{StaticResource CheckedGradient}"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="Blue" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.2" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:RadioButton}">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:RadioButton}">
                        <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                            <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                                <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                                <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="RadioButton.IsPressed" Value="True"/>
                                    <Condition Property="RadioButton.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="RadioButton.IsPressed" Value="True"/>
                                    <Condition Property="RadioButton.IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="RadioButton.IsPressed" Value="False"/>
                                    <Condition Property="RadioButton.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="RadioButton.IsChecked" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource CheckedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="RadioButton.IsEnabled" Value="false">
                                <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                                <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:RadioButton.ParentActiveVariant" Value="Large">
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Large"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:RadioButton.ParentActiveVariant" Value="Medium">
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Medium"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:RadioButton.ParentActiveVariant" Value="Small">
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Small"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:RadioButton.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant"  Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:RadioButton.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant" Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:RadioButton.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:RadioButton.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <Trigger Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Large">
                                <Setter TargetName="icon" Property="Width" Value="40"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                                <Setter TargetName="bg" Property="Height" Value="Auto"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Medium">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:RadioButton.InternalButtonSize" Value="Small">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="icon" Property="Height" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:Button}">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:Button}">
                        <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                            <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                                <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                                <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Button.IsPressed" Value="True"/>
                                    <Condition Property="Button.IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Button.IsPressed" Value="False"/>
                                    <Condition Property="Button.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Button.IsPressed" Value="True"/>
                                    <Condition Property="Button.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="Button.IsEnabled" Value="false">
                                <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                                <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:Button.ParentActiveVariant" Value="Large">
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Large"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:Button.ParentActiveVariant" Value="Medium">
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Medium"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:Button.ParentActiveVariant" Value="Small">
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Small"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:Button.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant"  Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:Button.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant" Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:Button.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:Button.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:Button.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <Trigger Property="SandRibbonInterop:Button.InternalButtonSize" Value="Large">
                                <Setter TargetName="icon" Property="Width" Value="40"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                                <Setter TargetName="bg" Property="Height" Value="Auto"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:Button.InternalButtonSize" Value="Medium">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:Button.InternalButtonSize" Value="Small">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="icon" Property="Height" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:NonRibbonButton}">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:NonRibbonButton}">
                        <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                            <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                                <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                                <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Button.IsPressed" Value="True"/>
                                    <Condition Property="Button.IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Button.IsPressed" Value="False"/>
                                    <Condition Property="Button.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Button.IsPressed" Value="True"/>
                                    <Condition Property="Button.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="Button.IsEnabled" Value="false">
                                <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                                <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:NonRibbonButton.InternalButtonSize" Value="Large">
                                <Setter TargetName="icon" Property="Width" Value="40"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                                <Setter TargetName="bg" Property="Height" Value="Auto"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:NonRibbonButton.InternalButtonSize" Value="Medium">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:NonRibbonButton.InternalButtonSize" Value="Small">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="icon" Property="Height" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:CheckBox}">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:CheckBox}">
                        <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                            <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                                <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                                <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CheckBox.IsChecked" Value="True"/>
                                    <Condition Property="CheckBox.IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CheckBox.IsChecked" Value="False"/>
                                    <Condition Property="CheckBox.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CheckBox.IsChecked" Value="True"/>
                                    <Condition Property="CheckBox.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.IsEnabled" Value="false">
                                <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                                <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.ParentActiveVariant" Value="Large">
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Large"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.ParentActiveVariant" Value="Medium">
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Medium"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.ParentActiveVariant" Value="Small">
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Small"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:CheckBox.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant"  Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:CheckBox.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant" Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:CheckBox.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:CheckBox.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Large">
                                <Setter TargetName="icon" Property="Width" Value="40"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                                <Setter TargetName="bg" Property="Height" Value="Auto"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Medium">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:CheckBox.InternalButtonSize" Value="Small">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="icon" Property="Height" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type SandRibbonInterop:DoubleButton}">
            <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
            <Setter Property="ToolTipService.ShowDuration" Value="30000"/>
            <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type SandRibbonInterop:DoubleButton}">
                        <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="0,0,0,0" CornerRadius="2" BorderThickness="1">
                            <StackPanel Orientation="Horizontal" >
                                <StackPanel Name="bg" Background="Transparent" Margin="2,2,0,2">
                                    <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                                    <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </StackPanel>
                                <Button Name="AncilliaryButton" Click="AncilliaryButton_Click" Content="." Margin="0,0,0,0" Height="Auto" VerticalAlignment="Stretch"/>
                                <Popup Child="{TemplateBinding Popup}" StaysOpen="False" PopupAnimation="Fade"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.IsPressed" Value="True"/>
                                    <Condition Property="SandRibbonInterop:DoubleButton.IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.IsPressed" Value="False"/>
                                    <Condition Property="SandRibbonInterop:DoubleButton.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.IsPressed" Value="True"/>
                                    <Condition Property="SandRibbonInterop:DoubleButton.IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.IsEnabled" Value="false">
                                <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                                <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.ParentActiveVariant" Value="Large">
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Large"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.ParentActiveVariant" Value="Medium">
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Medium"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.ParentActiveVariant" Value="Small">
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Small"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant"  Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                    <Condition Property="ParentActiveVariant" Value="Medium"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Medium"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="SandRibbonInterop:DoubleButton.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                    <Condition Property="ParentActiveVariant" Value="Small"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Small"/>
                            </MultiTrigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Large">
                                <Setter TargetName="icon" Property="Width" Value="40"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                                <Setter TargetName="bg" Property="Height" Value="Auto"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Medium">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                            <Trigger Property="SandRibbonInterop:DoubleButton.InternalButtonSize" Value="Small">
                                <Setter TargetName="icon" Property="Width" Value="15"/>
                                <Setter TargetName="icon" Property="Height" Value="15"/>
                                <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                                <Setter TargetName="bg" Property="Height" Value="15"/>
                                <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
