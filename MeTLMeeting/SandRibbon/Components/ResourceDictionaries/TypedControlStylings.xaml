<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:SandRibbonInterop="clr-namespace:MeTLLib.DataTypes;assembly=MeTLLib"
    xmlns:sr="http://schemas.divelements.co.uk/wpf/sandribbon"
    xmlns:my="clr-namespace:SandRibbon"
    xmlns:dict="clr-namespace:SandRibbon.Components.ResourceDictionaries"
    x:Class="SandRibbon.Components.ResourceDictionaries.TypedControlStylingEventHandlers"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--This area is for defining control templates and their triggers on specific controls-->
    <Style x:Key="ThicknessButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" Background="Transparent" CornerRadius="0" Padding="0" BorderThickness="0">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type SandRibbonInterop:VideoMirror}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type SandRibbonInterop:VideoMirror}">
                    <Grid>
                        <Border CornerRadius="4" Padding="4" 
                            BorderBrush="DarkGray" BorderThickness="1"
                            Background="{StaticResource BackgroundBlueGradient}">
                            <Viewbox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="{Binding Height, Converter={x:Static my:Converters.videoMirrorPaddingSubtractorConverter}}" Width="Auto">
                                <Rectangle Height="{TemplateBinding RectHeight}" 
                                    Width="{TemplateBinding RectWidth}" 
                                    Fill="{TemplateBinding RectFill}"/>
                            </Viewbox>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type SandRibbonInterop:Video}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type SandRibbonInterop:Video}">
                    <Grid>
                        <Border CornerRadius="4" Padding="4" 
                            BorderBrush="DarkGray" BorderThickness="1"
                            Background="{StaticResource BackgroundBlueGradient}">
                            <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent},Converter={x:Static my:Converters.videoMediaElementToMediaElementConverter}}">
                                <Viewbox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="{Binding Height, Converter={x:Static my:Converters.videoMirrorPaddingSubtractorConverter}}" Width="Auto">
                                    <ContentPresenter
                                              Content="{Binding Path=MediaElement}"/>
                                </Viewbox>
                                <Border Opacity="0" VerticalAlignment="Bottom" Name="ControlsBorder" CornerRadius="4" Padding="4" 
                            BorderBrush="DarkGray" BorderThickness="1"
                            Background="{StaticResource BackgroundBlueGradient}">
                                    <Grid >
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="30"/>
                                            <RowDefinition Height="40"/>
                                        </Grid.RowDefinitions>
                                        <StackPanel Grid.Row="0" Orientation="Horizontal" >
                                            <Button Content="Play" Click="Video_Play"/>
                                            <Button Content="Pause" Click="Video_Pause"/>
                                            <Button Content="Mute" Click="Video_Mute"/>
                                            <Slider Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MediaElement.Volume}" Minimum="0" Maximum="1" Width="100"/>
                                        </StackPanel>
                                        <Grid Grid.Row="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="80"/>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="80"/>
                                            </Grid.ColumnDefinitions>
                                            <Label Grid.Column="0" Content="{Binding ElementName=scrubBar, Path=Value, Converter={x:Static my:Converters.milisecondsToTimeConverter}}"/>
                                            <Slider Grid.Column="1" Name="scrubBar" Initialized="CreateMediaTimeline" 
                                        Minimum="0" ValueChanged="sliderValueChanged" PreviewMouseDown="sliderMouseDown" 
                                        PreviewMouseUp="sliderMouseUp" IsMoveToPointEnabled="False" TickFrequency="1000" IsSnapToTickEnabled="True" SmallChange="1000" />
                                            <Label Grid.Column="2" Content="{Binding ElementName=scrubBar, Path=Maximum, Converter={x:Static my:Converters.milisecondsToTimeConverter}}"/>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ControlsBorder" Property="Opacity" Value="0.7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type dict:MeTLImageToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:MeTLImageToolTip}">
                    <Border Padding="4" CornerRadius="2" Background="{StaticResource BackgroundBlueGradient}"
                            BorderBrush="DarkGray" BorderThickness="1">
                        <Border Background="{StaticResource BackgroundBlueGradient}" BorderBrush="DarkGray" BorderThickness="1">
                            <Grid Margin="2" MaxWidth="300">
                                <Image HorizontalAlignment="Left" VerticalAlignment="Top" Height="30" Width="30" 
                           Source="{TemplateBinding ImageSource}"/>
                                <TextBlock Margin="30,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" 
                           FontFamily="Verdana" FontSize="14" FontWeight="Bold" Foreground="Black"
                           Text="{TemplateBinding TitleText}"/>
                                <TextBlock Margin="0,30,0,0" TextWrapping="Wrap"
                           FontFamily="Verdana" FontSize="10" FontWeight="Regular" Foreground="Black"
                           Text="{TemplateBinding ContentText}"/>
                            </Grid>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type dict:MeTLContentToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:MeTLContentToolTip}">
                    <Border Padding="4" CornerRadius="2" Background="{StaticResource BackgroundBlueGradient}"
                            BorderBrush="DarkGray" BorderThickness="1">
                        <Border Background="{StaticResource BackgroundBlueGradient}" 
                            BorderBrush="DarkGray" BorderThickness="1">
                            <Grid Margin="2" MaxWidth="300">
                                <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Top" Height="30" Width="30" 
                                              Content="{TemplateBinding ContentElement}"/>
                                <TextBlock Margin="30,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" 
                           FontFamily="Verdana" FontSize="14" FontWeight="Bold" Foreground="Black"
                           Text="{TemplateBinding TitleText}"/>
                                <TextBlock Margin="0,30,0,0" TextWrapping="Wrap"
                           FontFamily="Verdana" FontSize="10" FontWeight="Regular" Foreground="Black"
                           Text="{TemplateBinding ContentText}"/>
                            </Grid>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type SandRibbonInterop:RenderedLiveWindow}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type SandRibbonInterop:RenderedLiveWindow}">
                    <Border CornerRadius="4" Padding="4" 
                            BorderBrush="DarkGray" BorderThickness="1"
                            Background="{StaticResource BackgroundBlueGradient}">
                        <Rectangle Height="{TemplateBinding Height}" 
                            Width="{TemplateBinding Width}" 
                            Fill="{TemplateBinding RectFill}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type SandRibbonInterop:AutoShape}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type SandRibbonInterop:AutoShape}">
                    <Grid>
                        <Path Stretch="Fill" StrokeThickness="{TemplateBinding StrokeThickness}" Data="{TemplateBinding PathData}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Foreground}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" 
			BorderThickness="1"
			Padding="2" 
			BorderBrush="Transparent" 
			CornerRadius="2" 
			Background="Transparent">
                        <Grid>
                            <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Name="content"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="3" />
                        </Trigger>
                        <!--<Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarButtonStyle" TargetType="Button">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" 
			BorderThickness="1"
			Padding="0" 
			BorderBrush="Transparent" 
			CornerRadius="0" 
			Background="Transparent">
                        <Grid>
                            <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="3" />
                        </Trigger>
                        <!--<Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="{StaticResource CheckedGradient}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type GridSplitter}" TargetType="GridSplitter">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border Name="border" 
			BorderThickness="1"
			Padding="0" 
			BorderBrush="LightGray" 
			CornerRadius="0" 
			Background="{StaticResource BackgroundBlueGradient}">
                        <Rectangle Margin="0" Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="DarkGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="Border" CornerRadius="2" Padding="2" SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource CheckedGradient}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverGradient}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type RadioButton}" TargetType="RadioButton">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Name="border" 
			BorderThickness="1"
			Padding="4,2" 
			BorderBrush="Transparent" 
			CornerRadius="2" 
			Background="Transparent">
                        <Grid>
                            <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource MouseOverGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource PressedGradient}"/>
                            <Setter Property="Foreground" Value="Gray"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{StaticResource CheckedGradient}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="Blue" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dict:RadioButton}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:RadioButton}">
                    <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                        <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                            <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                            <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RadioButton.IsPressed" Value="True"/>
                                <Condition Property="RadioButton.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RadioButton.IsPressed" Value="True"/>
                                <Condition Property="RadioButton.IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RadioButton.IsPressed" Value="False"/>
                                <Condition Property="RadioButton.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="RadioButton.IsChecked" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource CheckedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="RadioButton.IsEnabled" Value="false">
                            <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="dict:RadioButton.ParentActiveVariant" Value="Large">
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Large"/>
                        </Trigger>
                        <Trigger Property="dict:RadioButton.ParentActiveVariant" Value="Medium">
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Medium"/>
                        </Trigger>
                        <Trigger Property="dict:RadioButton.ParentActiveVariant" Value="Small">
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Small"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:RadioButton.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant"  Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:RadioButton.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant" Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:RadioButton.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:RadioButton.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:RadioButton.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <Trigger Property="dict:RadioButton.InternalButtonSize" Value="Large">
                            <Setter TargetName="icon" Property="Width" Value="40"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="bg" Property="Height" Value="Auto"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                        </Trigger>
                        <Trigger Property="dict:RadioButton.InternalButtonSize" Value="Medium">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="dict:RadioButton.InternalButtonSize" Value="Small">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="icon" Property="Height" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dict:Button}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:Button}">
                    <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                        <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                            <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                            <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsPressed" Value="True"/>
                                <Condition Property="Button.IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsPressed" Value="False"/>
                                <Condition Property="Button.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsPressed" Value="True"/>
                                <Condition Property="Button.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="Button.IsEnabled" Value="false">
                            <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="dict:Button.ParentActiveVariant" Value="Large">
                            <Setter Property="dict:Button.InternalButtonSize" Value="Large"/>
                        </Trigger>
                        <Trigger Property="dict:Button.ParentActiveVariant" Value="Medium">
                            <Setter Property="dict:Button.InternalButtonSize" Value="Medium"/>
                        </Trigger>
                        <Trigger Property="dict:Button.ParentActiveVariant" Value="Small">
                            <Setter Property="dict:Button.InternalButtonSize" Value="Small"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:Button.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant"  Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:Button.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:Button.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant" Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:Button.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:Button.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:Button.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:Button.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:Button.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <Trigger Property="dict:Button.InternalButtonSize" Value="Large">
                            <Setter TargetName="icon" Property="Width" Value="40"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="bg" Property="Height" Value="Auto"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                        </Trigger>
                        <Trigger Property="dict:Button.InternalButtonSize" Value="Medium">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="dict:Button.InternalButtonSize" Value="Small">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="icon" Property="Height" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dict:NonRibbonButton}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:NonRibbonButton}">
                    <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                        <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                            <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                            <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsPressed" Value="True"/>
                                <Condition Property="Button.IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsPressed" Value="False"/>
                                <Condition Property="Button.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsPressed" Value="True"/>
                                <Condition Property="Button.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="Button.IsEnabled" Value="false">
                            <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="dict:NonRibbonButton.InternalButtonSize" Value="Large">
                            <Setter TargetName="icon" Property="Width" Value="40"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="bg" Property="Height" Value="Auto"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                        </Trigger>
                        <Trigger Property="dict:NonRibbonButton.InternalButtonSize" Value="Medium">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="dict:NonRibbonButton.InternalButtonSize" Value="Small">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="icon" Property="Height" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dict:CheckBox}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:CheckBox}">
                    <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="2" CornerRadius="2" BorderThickness="1">
                        <StackPanel Name="bg" Background="Transparent" Orientation="Vertical">
                            <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                            <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBox.IsChecked" Value="True"/>
                                <Condition Property="CheckBox.IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBox.IsChecked" Value="False"/>
                                <Condition Property="CheckBox.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBox.IsChecked" Value="True"/>
                                <Condition Property="CheckBox.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="dict:CheckBox.IsEnabled" Value="false">
                            <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="dict:CheckBox.ParentActiveVariant" Value="Large">
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Large"/>
                        </Trigger>
                        <Trigger Property="dict:CheckBox.ParentActiveVariant" Value="Medium">
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Medium"/>
                        </Trigger>
                        <Trigger Property="dict:CheckBox.ParentActiveVariant" Value="Small">
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Small"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:CheckBox.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant"  Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:CheckBox.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant" Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:CheckBox.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:CheckBox.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:CheckBox.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <Trigger Property="dict:CheckBox.InternalButtonSize" Value="Large">
                            <Setter TargetName="icon" Property="Width" Value="40"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="bg" Property="Height" Value="Auto"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                        </Trigger>
                        <Trigger Property="dict:CheckBox.InternalButtonSize" Value="Medium">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="dict:CheckBox.InternalButtonSize" Value="Small">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="icon" Property="Height" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type dict:DoubleButton}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource ToolTipDelay}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="ParentActiveVariant" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sr:RibbonGroup}}, Path=ActiveVariant}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dict:DoubleButton}">
                    <Border Name="border" Background="Transparent" BorderBrush="Transparent" Padding="0,0,0,0" CornerRadius="2" BorderThickness="1">
                        <StackPanel Orientation="Horizontal" >
                            <StackPanel Name="bg" Background="Transparent" Margin="2,2,0,2">
                                <Image Name="icon" Width="40" Source="{TemplateBinding Icon}" HorizontalAlignment="Center"/>
                                <TextBlock Name="text" Text="{TemplateBinding Text}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </StackPanel>
                            <Button DataContext="{Binding ElementName=DoubleButtonPopup}" Click="OpenDoubleButtonPopup" Content="." Margin="0,0,0,0" Height="Auto" VerticalAlignment="Stretch"/>
                            <Popup Name="DoubleButtonPopup" Child="{TemplateBinding Popup}" StaysOpen="False" PopupAnimation="Fade"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.IsPressed" Value="True"/>
                                <Condition Property="dict:DoubleButton.IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.IsPressed" Value="False"/>
                                <Condition Property="dict:DoubleButton.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource MouseOverGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.IsPressed" Value="True"/>
                                <Condition Property="dict:DoubleButton.IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PressedGradient}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="dict:DoubleButton.IsEnabled" Value="False">
                            <Setter TargetName="icon" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="text" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="DoubleButtonPopup" Property="IsOpen" Value="False"/>
                        </Trigger>
                        <Trigger Property="dict:DoubleButton.ParentActiveVariant" Value="Large">
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Large"/>
                        </Trigger>
                        <Trigger Property="dict:DoubleButton.ParentActiveVariant" Value="Medium">
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Medium"/>
                        </Trigger>
                        <Trigger Property="dict:DoubleButton.ParentActiveVariant" Value="Small">
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Small"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.CollapseToMedium" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant"  Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.CollapseToSmall" Value="WhenGroupIsMedium"/>
                                <Condition Property="ParentActiveVariant" Value="Medium"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.CollapseToMedium" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Medium"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="dict:DoubleButton.CollapseToSmall" Value="WhenGroupIsSmall"/>
                                <Condition Property="ParentActiveVariant" Value="Small"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="dict:DoubleButton.InternalButtonSize" Value="Small"/>
                        </MultiTrigger>
                        <Trigger Property="dict:DoubleButton.InternalButtonSize" Value="Large">
                            <Setter TargetName="icon" Property="Width" Value="40"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="bg" Property="Height" Value="Auto"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Stretch"/>
                        </Trigger>
                        <Trigger Property="dict:DoubleButton.InternalButtonSize" Value="Medium">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="dict:DoubleButton.InternalButtonSize" Value="Small">
                            <Setter TargetName="icon" Property="Width" Value="15"/>
                            <Setter TargetName="icon" Property="Height" Value="15"/>
                            <Setter TargetName="text" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="bg" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="bg" Property="Height" Value="15"/>
                            <Setter TargetName="bg" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>